---
import type { HTMLTag, Polymorphic } from "astro/types";

type SpaceString = `${number | string}${"px" | "em" | "rem" | "ch" | "vw" | "vh" | "vmin" | "vmax" | "%"}`;

type SpaceVar = `var(--s${number})`;

type Space = SpaceString | SpaceVar;

type Props<Tag extends HTMLTag> = Polymorphic<{
	as: Tag;
	space?: Space;
}>;

const { as: Tag = "div", space = "var(--s0)", class: className, ...props } = Astro.props;
---

<!-- <Tag
	{...props}
	class={`stack ${className ?? ""}`}
	style={{
		"--space": space,
	}}
>
	<slot />
</Tag> -->
<div>
	<stack-l space={space}>
		<slot />
	</stack-l>
</div>

<script>
	class Stack extends HTMLElement {
		public i: string = "";

		public constructor() {
			super();
		}

		get space() {
			return this.getAttribute("space") || "var(--s1)";
		}

		set space(val) {
			this.setAttribute("space", val);
		}

		static get observedAttributes() {
			return ["space"];
		}

		public render() {
			this.i = `Stack-${[this.space].join("")}`;

			this.dataset.i = this.i;
			if (!document.getElementById(this.i)) {
				let styleEl = document.createElement("style");
				styleEl.id = this.i;

				styleEl.innerHTML = `
					[data-i="${this.i}"] > * + * {
						margin-block-start: ${this.space};
					}
				`
					.replace(/\s\s+/g, " ")
					.trim();

				document.head.appendChild(styleEl);
			}
		}

		public connectedCallback() {
			this.render();
		}

		public attributeChangedCallback() {
			this.render();
		}
	}

	if ("customElements" in window) {
		customElements.define("stack-l", Stack);
	}
</script>

<style>
	.stack {
		display: flex;
		flex-direction: column;
		justify-content: flex-start;
	}

	.stack > * {
		margin-block: 0;
	}

	.stack > * + * {
		margin-block-start: var(--space, 1.5rem);
	}
</style>
