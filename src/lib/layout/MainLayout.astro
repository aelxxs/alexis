---
import "../styling/style.css";
import "../styling/reset.css";

import Header from "@blocks/Header.astro";
import Footer from "@blocks/Footer.astro";
import TimeWasted from "@lib/blocks/TimeWasted.svelte";

export interface Props {
	title: string;
	showHeader?: boolean;
	showFooter?: boolean;
}

const { title, showFooter = true, showHeader = true } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
		<div id="hire-me" class="box invert">
			<div class="cluster" data-justify="center" data-wrap="nowrap">
				<img class="emote" src="/emote.gif" alt="" />
				<p>
					I'm currently open for internships and freelance positions for summer 2024.
					<br />
					<a href="mailto:alexis@alexis.lol">Contact me</a>.
				</p>
			</div>
		</div>
		<br />
		{showHeader && <Header />}
		<!-- <span class="circle"></span> -->
		<main class="stack gap:1">
			<img class="hero-img rounded:lg" src="/hero.gif" alt="" />
			<br />
			<div class="stack gap:0">
				<h1>{title}</h1>
				<slot name="title" />
			</div>
			<slot />
		</main>
		{showFooter && <Footer />}

		<div class="corner-container">
			<TimeWasted client:load />
			<img class="corner" src="/sticker.png" alt="" />
		</div>
		<style>
			.corner-container {
				position: fixed;
				bottom: 0;
				right: 0;
				z-index: -1;
			}

			.corner {
				width: 3rem;
				position: fixed;
				bottom: -0.25rem;
				right: -0.25rem;
			}

			body {
				max-width: 58rem;
				padding: 1rem 1.25rem;
				margin-inline: auto;
			}

			main {
				padding: 1.25rem 2.25rem;
				margin-inline: auto;
				margin-block: 1rem;
			}

			.emote {
				width: 3.5rem;
				height: 3.5rem;
			}

			.hero-img {
				display: block;
				width: 100%;
				height: 15rem;
				object-fit: cover;
			}

			@media (max-width: 768px) {
				main {
					padding: 1.25rem 0.75rem;
				}

				.hero-img {
					height: 12rem;
				}
			}

			.circle {
				position: fixed;
				inset: 0;
				pointer-events: none;
				z-index: -2;
			}

			.circle::before {
				filter: blur(5rem);
				content: "";
				display: block;
				width: 35rem;
				height: 35rem;
				border-radius: 50%;
				background: radial-gradient(circle, #006e7b, var(--bg-mute), transparent);
				transform: translate(-50%, -50%);
			}
		</style>

		<script>
			let inputX = 0;
			let inputY = 0;
			let posX = 0;
			let posY = 0;
			let alpha = 1;

			const circle = document.querySelector<HTMLSpanElement>(".circle");

			if (circle !== null) {
				addEventListener("mousemove", (event) => {
					inputX = event.clientX;
					inputY = event.clientY;

					alpha = 25;
				});

				addEventListener("touchmove", (event) => {
					if (event.touches.length > 0) {
						event.preventDefault();

						inputX = event.touches[0].clientX;
						inputY = event.touches[0].clientY;
					}

					alpha = 25;
				});

				let prev = 0;

				requestAnimationFrame(function render(now) {
					requestAnimationFrame(render);

					const factor = (now - prev) / 16;
					prev = now;

					const speed = 0.125;

					posX += factor * speed * (inputX - posX);
					posY += factor * speed * (inputY - posY);

					alpha *= Math.pow(0.95, factor);
					const opacity = Math.min(1, alpha);

					circle.style.transform = `translate3d(${~~posX}px, ${~~posY}px, 0)`;
					circle.style.opacity = (Math.round(opacity * 255) / 255).toString();
				});
			}
		</script>
	</body>
</html>
