---
import "../styling/main.css";
import "../styling/reset.css";

import Header from "@blocks/Header.astro";

export interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
		<div class="circle"></div>
		<Header />
		<main class="stack">
			<div id="hero" class="stack" style="--space: 0.85rem">
				<h1>{title}</h1>
				<slot name="title" />
			</div>
			<slot />
		</main>
	</body>
</html>

<style>
	.circles {
		inset: 0;
		position: absolute;
		z-index: -1;
	}
	body {
		max-width: 60rem;
		padding: 2.5rem 1rem;
		margin: 0 auto;
		position: relative;
	}

	main {
		padding: 2.5rem 3.25rem;
	}

	@media (max-width: 768px) {
		main {
			padding: 2.5rem 0.75rem;
		}
	}

	.circle {
		position: fixed;
		top: 0;
		left: 0;
		pointer-events: none;
		z-index: -2;
	}

	.circle::before {
		content: "";
		display: block;
		width: 60rem;
		height: 60rem;
		border-radius: 50%;
		filter: blur(10rem);
		background: radial-gradient(circle, var(--bg-mute), transparent); /* Gradient background */
		transform: translate(-50%, -50%);
		animation: pulse 300ms ease-in-out alternate infinite;
	}

	p {
		font-size: 1.5rem;
	}
</style>

<script>
	let mouseX = 0;
	let mouseY = 0;
	let posX = 0;
	let posY = 0;
	let alpha = 1;

	const circle = document.querySelector(".circle");

	addEventListener("mousemove", ({ clientX, clientY }) => {
		mouseX = clientX;
		mouseY = clientY;
		// arbitrary high value so that it takes a moment until it actually fades out.
		alpha = 10;
	});

	let prev = 0;

	requestAnimationFrame(function render(now) {
		requestAnimationFrame(render);

		const factor = (now - prev) / 16;
		prev = now;

		const speed = 0.125;

		posX += factor * speed * (mouseX - posX);
		posY += factor * speed * (mouseY - posY);

		alpha *= Math.pow(0.95, factor);

		circle.style.transform = `translate(${posX}px, ${posY}px)`;

		let opacity = Math.min(1, alpha);

		circle.style.opacity = Math.round(opacity * 255) / 255;
	});
</script>
