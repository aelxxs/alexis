---
import CurrentlyPlaying from "@lib/blocks/CurrentlyPlaying.svelte";
import "../styling/main.css";
import "../styling/reset.css";

import Header from "@blocks/Header.astro";

export interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
		<Header />
		<span class="circle"></span>
		<main class="stack gap:3">
			<!-- <div class="hero-container">
				<img
					class="hero-img"
					src="https://i.pinimg.com/originals/c1/fc/9d/c1fc9d7f6ae08d56f2b84e81799790a5.gif"
					alt=""
				/>
			</div> -->
			<div id="hero" class="stack" style="--space: 0.85rem">
				<h1>{title}</h1>
				<slot name="title" />
			</div>
			<slot />
		</main>
		<footer class="cluster" data-justify="space-between">
			<p class="fs:sm">
				Made with <a href="https://astro.build">Astro</a> by <a href="https://github.com/aelxxs"
					>Alexis Vielma</a
				>
				 â€“ 2023
			</p>
			<!-- @ts-ignore -->
			<CurrentlyPlaying mode="compact" client:load />
		</footer>
	</body>
</html>

<style>
	body {
		max-width: 60rem;
		padding: 2.5rem 1rem;
		margin-inline: auto;
	}

	body::before {
		content: "";
		display: block;
		position: fixed;
		filter: blur(100rem);
		background: radial-gradient(circle, #006e7b, var(--bg-mute), transparent);
		width: 35rem;
		height: 35rem;
		opacity: 0.5;
		border-radius: 50%;
		top: -50%;
		right: -20%;
		z-index: -1;
	}

	.hero-img {
		position: relative;
		width: 100%;
		height: 14.5rem;
		object-fit: cover;
		border-radius: 0.5rem;
	}

	.hero-container {
		position: relative;
	}

	.hero-container::after {
		content: "";
		display: block;
		position: absolute;
		inset: 0;
		width: 100%;
		height: 100%;
		background: linear-gradient(0, rgba(0, 0, 0, 0.65) 0%, transparent 100%);
		border-radius: 0.5rem;
	}

	@media (max-width: 768px) {
		.hero-img {
			height: 10rem;
		}
	}

	main {
		padding: 1.5rem 3.25rem;
	}

	@media (max-width: 768px) {
		main {
			padding: 1.5rem 0.75rem;
		}
	}

	.circle {
		position: fixed;
		inset: 0;
		pointer-events: none;
		z-index: -2;
	}

	.circle::before {
		filter: blur(5rem);
		content: "";
		display: block;
		width: 35rem;
		height: 35rem;
		border-radius: 50%;
		background: radial-gradient(circle, #006e7b, var(--bg-mute), transparent);
		transform: translate(-50%, -50%);
		animation: pulse 300ms ease-in-out alternate infinite;
	}

	footer {
		padding-top: 1.5rem;
	}
</style>

<script>
	let inputX = 0;
	let inputY = 0;
	let posX = 0;
	let posY = 0;
	let alpha = 1;

	const circle = document.querySelector<HTMLSpanElement>(".circle");

	if (!circle) {
		throw new Error("No circle found");
	}

	addEventListener("mousemove", (event) => {
		inputX = event.clientX;
		inputY = event.clientY;

		alpha = 25;
	});

	addEventListener("touchmove", (event) => {
		if (event.touches.length > 0) {
			event.preventDefault();

			inputX = event.touches[0].clientX;
			inputY = event.touches[0].clientY;
		}

		alpha = 25;
	});

	let prev = 0;

	requestAnimationFrame(function render(now) {
		requestAnimationFrame(render);

		const factor = (now - prev) / 16;
		prev = now;

		const speed = 0.125;

		posX += factor * speed * (inputX - posX);
		posY += factor * speed * (inputY - posY);

		alpha *= Math.pow(0.95, factor);
		const opacity = Math.min(1, alpha);

		circle.style.transform = `translate3d(${~~posX}px, ${~~posY}px, 0)`;
		// circle.style.opacity = (Math.round(opacity * 255) / 255).toString();
	});
</script>
