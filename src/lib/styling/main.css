/* Font */
@import url("https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap");
@import url("https://fonts.googleapis.com/css2?family=Inconsolata:wght@400;500;600;700;800;900&display=swap");

* {
	font-family: "Inter", sans-serif;
}

/* Theme */

:root {
	--txt1: hsla(0, 0%, 24%, 1);
	--txt2: hsla(0, 0%, 24%, 0.9);
	--txt3: hsla(0, 0%, 24%, 0.75);
}

/* Modular Scale */

:root {
	--ratio: 1.275;
	--s-6: calc(var(--s-5) / var(--ratio));
	--s-5: calc(var(--s-4) / var(--ratio));
	--s-4: calc(var(--s-3) / var(--ratio));
	--s-3: calc(var(--s-2) / var(--ratio));
	--s-2: calc(var(--s-1) / var(--ratio));
	--s-1: calc(var(--s0) / var(--ratio));
	--s0: 1rem;
	--s1: calc(var(--s0) * var(--ratio));
	--s2: calc(var(--s1) * var(--ratio));
	--s3: calc(var(--s2) * var(--ratio));
	--s4: calc(var(--s3) * var(--ratio));
	--s5: calc(var(--s4) * var(--ratio));
	--s6: calc(var(--s5) * var(--ratio));
}

:root {
	--step--1: clamp(0.89rem, calc(0.87rem + 0.08vw), 0.94rem);
	--step-0: clamp(1rem, calc(0.96rem + 0.22vw), 1.13rem);
	--step-1: clamp(1.13rem, calc(1.05rem + 0.39vw), 1.35rem);
	--step-2: clamp(1.27rem, calc(1.14rem + 0.62vw), 1.62rem);
	--step-3: clamp(1.42rem, calc(1.24rem + 0.9vw), 1.94rem);
	--step-4: clamp(1.6rem, calc(1.35rem + 1.27vw), 2.33rem);
}

/* Typography */

h1,
.fs\:xxl {
	font-size: var(--s3);
}

h2,
.fs\:xl {
	font-size: var(--s3);
}

h3,
.fs\:lg {
	font-size: var(--s2);
}

h4,
.fs\:md {
	font-size: var(--s1);
}

h5,
p,
.fs\:sm {
	font-size: var(--s0);
}

small,
.fs\:xs {
	font-size: var(--s-1);
}

* {
	color: var(--txt1);
}

/* Basic Layout */

.box {
	padding: var(--s1);
	border: var(--border-thin) solid;
	outline: var(--border-thin) transparent;
	outline-offset: calc(var(--border-thin) * -1);
	--color-light: #ddd;
	--color-dark: #000;
	color: var(--color-dark);
	background-color: var(--color-light);
}

.box * {
	color: inherit;
}

.box.invert {
	color: var(--color-light);
	background-color: var(--color-dark);
}

.center {
	/* ↓ Remove padding from the width calculation */
	box-sizing: content-box;
	/* ↓ The maximum width is the maximum measure */
	max-inline-size: 60ch;
	/* ↓ Only affect horizontal margins */
	margin-inline: auto;
	/* ↓ Apply the minimum horizontal space */
	padding-inline-start: var(--s1);
	padding-inline-end: var(--s1);
}

.icon {
	height: 0.75em;
	/* ↓ Override the em value with `1cap`
    where `cap` is supported */
	height: 1cap;
	width: 0.75em;
	width: 1cap;
}
.with-icon {
	/* ↓ Set the `inline-flex` context,
    which eliminates the word space */
	display: inline-flex;
	align-items: baseline;
}
.with-icon .icon {
	/* ↓ Use the logical margin property
    and a --space variable with a fallback */
	margin-inline-end: var(--space, 0.5em);
}

.repel {
	display: flex;
	flex-wrap: wrap;
	justify-content: space-between;
	align-items: var(--repel-vertical-alignment, center);
	gap: var(--gutter, var(--space-s-l));
}

.repel[data-nowrap] {
	flex-wrap: nowrap;
}

.with-sidebar {
	display: flex;
	flex-wrap: wrap;
	gap: var(--gutter, var(--s1));
}
.with-sidebar > :first-child {
	flex-basis: 9rem;
	flex-grow: 1;
}
.with-sidebar > :last-child {
	flex-basis: 0;
	flex-grow: 999;
	min-inline-size: 65%;
}

.grid {
	display: grid;
	grid-gap: var(--gutter, var(--s0));
	--minimum: 40ch;
}

@supports (width: min(var(--minimum), 100%)) {
	.grid {
		grid-template-columns: repeat(auto-fit, minmax(min(var(--minimum), 100%), 1fr));
	}
}

p {
	max-width: 72ch;
}
